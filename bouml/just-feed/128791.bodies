class IHMJustFeed
!!!132247.cpp!!!	IHMJustFeed(inout parent : QWidget = nullptr)
    ui->setupUi(this);
    qDebug() << Q_FUNC_INFO;

    baseDeDonnees = BaseDeDonnees::getInstance();
    baseDeDonnees->ouvrir("just-feed.sqlite");

    initialiser();
    gererEvenements();
    chargerDistributeurs();
!!!132375.cpp!!!	~IHMJustFeed()
    delete ui;
    BaseDeDonnees::detruireInstance();
    qDebug() << Q_FUNC_INFO;
!!!139031.cpp!!!	initialiser() : void
    ui->labelTitreProjet->setText(QString::fromUtf8(NOM_APPLICATION) + " v" +
                                  QString::fromUtf8(VERSION_APPLICATION));

    // Initialise le QTableView
    nomColonnes << "Nom"
                << "Ville"
                << "Code Postal";
    modeleDistributeur = new QStandardItemModel(0, nomColonnes.size());
    modeleDistributeur->setHorizontalHeaderLabels(nomColonnes);
    ui->tableViewDistributeurs->setEditTriggers(
      QAbstractItemView::NoEditTriggers);

    // Redimensionner automatiquement la colonne pour occuper l'espace
    // disponible
    ui->tableViewDistributeurs->horizontalHeader()->setSectionResizeMode(
      QHeaderView::Stretch);
    nbLignesDistributeurs = modeleDistributeur->rowCount();

    afficherPageAccueil();
!!!139159.cpp!!!	gererEvenements() : void
    connect(ui->pushButtonRetour,
            SIGNAL(clicked(bool)),
            this,
            SLOT(afficherPageAccueil()));
    connect(ui->pushButtonEtat,
            SIGNAL(clicked(bool)),
            this,
            SLOT(afficherPageEtatDistributeur()));
    connect(ui->pushButtonIntervention,
            SIGNAL(clicked(bool)),
            this,
            SLOT(afficherPageInterventionDistributeur()));
    connect(ui->pushButtonGeolocalisation,
            SIGNAL(clicked(bool)),
            this,
            SLOT(afficherPageGeolocalisationDistributeur()));
    connect(ui->comboBoxDistributeurs,
            SIGNAL(currentIndexChanged(int)),
            this,
            SLOT(selectionnerDistributeur(int)));
    connect(ui->tableViewDistributeurs,
            SIGNAL(clicked(QModelIndex)),
            this,
            SLOT(selectionner(QModelIndex)));
!!!139287.cpp!!!	recupererIndexEtatsDistributeur(in idDistibuteur : QString) : int
    for(int index = 0; index < etatsDistributeurs.size(); ++index)
    {
        if(etatsDistributeurs.at(index).at(
             Distributeur::ChampDistributeur::CHAMP_idDistributeur) ==
           idDistibuteur)
            return index;
    }
    return -1; // pas trouvé
!!!139671.cpp!!!	chargerDistributeurs() : void
    effacerTableDistributeurs();

    // Exemple avec une base de donnée SQLite
    QString requete = "SELECT * FROM Distributeur";

    baseDeDonnees->recuperer(requete, distributeurs);
    qDebug() << Q_FUNC_INFO << distributeurs;
    ui->comboBoxDistributeurs->clear();
    ui->comboBoxDistributeurs->addItem("");
    ui->pushButtonEtat->setEnabled(false);
    ui->pushButtonIntervention->setEnabled(false);
    ui->pushButtonGeolocalisation->setEnabled(false);
    for(int i = 0; i < distributeurs.size(); ++i)
    {
        ui->comboBoxDistributeurs->addItem(distributeurs.at(i).at(
          Distributeur::ChampDistributeur::CHAMP_libelle));
        afficherDistributeurTable(distributeurs.at(i));
    }

    requete =
      "SELECT "
      "Distributeur.*,Produit.designation,NiveauApprovisionnement.libelle AS "
      "niveauApprovisionnement,StockDistributeur.numeroBac,StockDistributeur."
      "quantite,StockDistributeur.quantiteMax FROM StockDistributeur "
      "INNER JOIN Distributeur ON "
      "Distributeur.idDistributeur=StockDistributeur.idDistributeur "
      "INNER JOIN Produit ON Produit.idProduit=StockDistributeur.idProduit "
      "INNER JOIN NiveauApprovisionnement ON "
      "NiveauApprovisionnement.idNiveauApprovisionnement=StockDistributeur."
      "idNiveauApprovisionnement "
      "INNER JOIN ServeurTTN ON "
      "ServeurTTN.idServeurTTN=Distributeur.idServeurTTN;";
    baseDeDonnees->recuperer(requete, etatsDistributeurs);
    qDebug() << Q_FUNC_INFO << etatsDistributeurs;
!!!139799.cpp!!!	effacerTableDistributeurs() : void
    qDebug() << Q_FUNC_INFO;
    distributeurs.clear();
    modeleDistributeur->setHorizontalHeaderLabels(nomColonnes);
    ui->tableViewDistributeurs->setModel(modeleDistributeur);
    nbLignesDistributeurs = 0;
!!!139927.cpp!!!	afficherDistributeurTable(in distributeur : QStringList) : void
    qDebug() << Q_FUNC_INFO << distributeur;

    // Crée les items pour les cellules d'une ligne
    QStandardItem* nom = new QStandardItem(
      distributeur.at(Distributeur::ChampDistributeur::CHAMP_libelle));
    QStandardItem* ville = new QStandardItem(
      distributeur.at(Distributeur::ChampDistributeur::CHAMP_ville));
    QStandardItem* codePostal = new QStandardItem(
      distributeur.at(Distributeur::ChampDistributeur::CHAMP_codepostal));

    // Ajoute les items dans le modèle de données
    modeleDistributeur->setItem(nbLignesDistributeurs,
                                IHMJustFeed::COLONNE_DISTRIBUTEUR_NOM,
                                nom);
    modeleDistributeur->setItem(nbLignesDistributeurs,
                                IHMJustFeed::COLONNE_DISTRIBUTEUR_VILLE,
                                ville);
    modeleDistributeur->setItem(nbLignesDistributeurs,
                                IHMJustFeed::COLONNE_DISTRIBUTEUR_CODEPOSTAL,
                                codePostal);
    // Exemple de personnalisation de l'affichage d'une ligne
    QFont texte;
    // texte.setPointSize(12);
    texte.setBold(true);
    for(int i = 0; i < nomColonnes.size(); ++i)
    {
        QStandardItem* item =
          modeleDistributeur->item(nbLignesDistributeurs, i);
        item->setBackground(QColor(225, 223, 0));
        item->setFont(texte);
    }

    qDebug() << Q_FUNC_INFO << "nbLignesDistributeurs" << nbLignesDistributeurs;

    nbLignesDistributeurs += 1;

    // Configure l'affichage du QTableView
    ui->tableViewDistributeurs->setSizePolicy(QSizePolicy::Minimum,
                                              QSizePolicy::Minimum);
    ui->tableViewDistributeurs->setVerticalScrollBarPolicy(
      Qt::ScrollBarAlwaysOff);
    ui->tableViewDistributeurs->setHorizontalScrollBarPolicy(
      Qt::ScrollBarAlwaysOff);
    // ui->tableViewDistributeurs->resizeColumnsToContents();

    ui->tableViewDistributeurs->setMinimumWidth(ui->centralwidget->width());
    // ui->tableViewUtilisateurs->setMinimumHeight(ui->centralwidget->height());
    /*ui->tableViewUtilisateurs->setFixedSize(
      ui->tableViewUtilisateurs->horizontalHeader()->length() +
        ui->tableViewUtilisateurs->verticalHeader()->width(),
      ui->tableViewUtilisateurs->verticalHeader()->length() +
        ui->tableViewUtilisateurs->horizontalHeader()->height());*/
    ui->tableViewDistributeurs->setFixedHeight(
      ui->tableViewDistributeurs->verticalHeader()->length() +
      ui->tableViewDistributeurs->horizontalHeader()->height());
!!!140055.cpp!!!	afficherEtatDistributeur(in indexDistributeur : int) : void
    QString idDistributeur =
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_idDistributeur);
    qDebug() << Q_FUNC_INFO << indexDistributeur << idDistributeur;
    int index = recupererIndexEtatsDistributeur(idDistributeur);
    qDebug() << Q_FUNC_INFO << index;
    if(index == -1)
        return;

    ui->labelNom->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_libelle));
    ui->labelAdresse->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_adresse));
    ui->labelVille->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_codepostal) +
      QString(" ") +
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_ville));

    for(int i = 0; i < distributeurs.at(indexDistributeur)
                         .at(Distributeur::ChampDistributeur::CHAMP_nbBacs)
                         .toInt();
        ++i)
    {
        if(etatsDistributeurs.at(index + i).at(
             Distributeur::ChampDistributeur::CHAMP_numeroBac) == "1")
        {
            ui->progressBarRemplissageBac1->setValue(
              (etatsDistributeurs.at(index + i)
                 .at(Distributeur::ChampDistributeur::CHAMP_quantite)
                 .toDouble() /
               etatsDistributeurs.at(index + i)
                 .at(Distributeur::ChampDistributeur::CHAMP_quantiteMax)
                 .toDouble()) *
              100);
            ui->labelNomProduitRemplissageBac1->setText(
              QString("Bac 1 : ") +
              etatsDistributeurs.at(index + i).at(
                Distributeur::ChampDistributeur::CHAMP_designationProduit));
        }
        else if(etatsDistributeurs.at(index + i).at(
                  Distributeur::ChampDistributeur::CHAMP_numeroBac) == "2")
        {
            ui->progressBarRemplissageBac2->setValue(
              (etatsDistributeurs.at(index + i)
                 .at(Distributeur::ChampDistributeur::CHAMP_quantite)
                 .toDouble() /
               etatsDistributeurs.at(index + i)
                 .at(Distributeur::ChampDistributeur::CHAMP_quantiteMax)
                 .toDouble()) *
              100);
            ui->labelNomProduitRemplissageBac2->setText(
              QString("Bac 2 : ") +
              etatsDistributeurs.at(index + i).at(
                Distributeur::ChampDistributeur::CHAMP_designationProduit));
        }

        ui->progressBarHygrometrieBacs->setValue(
          etatsDistributeurs.at(indexDistributeur)
            .at(Distributeur::ChampDistributeur::CHAMP_hygrometrie)
            .toInt());
    }
!!!140183.cpp!!!	afficherInterventionDistributeur(in indexDistributeur : int) : void
    QString idDistributeur =
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_idDistributeur);
    qDebug() << Q_FUNC_INFO << indexDistributeur << idDistributeur;
    int index = recupererIndexInterventionDistributeur(idDistributeur);
    qDebug() << Q_FUNC_INFO << index;
    if(index == -1)
        return;

    ui->labelNomIntervention->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_libelle));
    ui->labelAdresseIntervention->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_adresse));
    ui->labelVilleIntervention->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_codepostal) +
      QString(" ") +
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_ville));
!!!140311.cpp!!!	afficherGeolocalisationDistributeur(in indexDistributeur : int) : void
    QString idDistributeur =
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_idDistributeur);
    qDebug() << Q_FUNC_INFO << indexDistributeur << idDistributeur;
    int index = recupererIndexGeolocalisationDistributeur(idDistributeur);
    qDebug() << Q_FUNC_INFO << index;
    if(index == -1)
        return;

    ui->labelNomGeolocalisation->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_libelle));
    ui->labelAdresseGeolocalisation->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_adresse));
    ui->labelVilleGeolocalisation->setText(
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_codepostal) +
      QString(" ") +
      distributeurs.at(indexDistributeur)
        .at(Distributeur::ChampDistributeur::CHAMP_ville));
!!!140439.cpp!!!	selectionner(in index : QModelIndex) : void
    qDebug() << Q_FUNC_INFO << "numéro de distributeur"
             << index.row(); // le numéro de ligne dans la table
    qDebug() << Q_FUNC_INFO << "distributeur" << distributeurs.at(index.row());

    ui->comboBoxDistributeurs->setCurrentIndex(index.row() + 1);
!!!140567.cpp!!!	selectionnerDistributeur(in index : int) : void
    qDebug() << Q_FUNC_INFO << "numéro de distributeur"
             << index; // le numéro dans la liste déroulante
    if(index == 0)
    {
        numeroDistributeurSelectionne = -1;
        ui->pushButtonEtat->setEnabled(false);
        ui->pushButtonIntervention->setEnabled(false);
        ui->pushButtonGeolocalisation->setEnabled(false);
    }
    else
    {
        numeroDistributeurSelectionne = index - 1;
        ui->pushButtonEtat->setEnabled(true);
        ui->pushButtonIntervention->setEnabled(true);
        ui->pushButtonGeolocalisation->setEnabled(true);
    }
!!!140695.cpp!!!	afficherPage(in page : IHMJustFeed::Page) : void
    qDebug() << Q_FUNC_INFO << "page" << page;
    ui->pages->setCurrentIndex(page);
!!!140823.cpp!!!	afficherPageAccueil() : void
    ui->pushButtonRetour->hide();
    afficherPage(Page::Accueil);
!!!140951.cpp!!!	afficherPageEtatDistributeur() : void
    qDebug() << Q_FUNC_INFO << "numeroDistributeurSelectionne"
             << numeroDistributeurSelectionne;
    afficherEtatDistributeur(numeroDistributeurSelectionne);
    ui->pushButtonRetour->show();
    afficherPage(Page::Distributeur);
!!!141079.cpp!!!	afficherPageInterventionDistributeur() : void
    ui->pushButtonRetour->show();
    afficherPage(Page::Intervention);
!!!141207.cpp!!!	afficherPageGeolocalisationDistributeur() : void
    ui->pushButtonRetour->show();
    afficherPage(Page::Geolocalisation);
